{"title":"python将整个项目的py转为so","uid":"131b7583d9015ea1c037b717572010d5","slug":"python将整个项目的py转为so","date":"2023-08-19T07:13:54.000Z","updated":"2023-08-19T11:26:45.338Z","comments":false,"path":"api/articles/python将整个项目的py转为so.json","keywords":null,"cover":"images/7753777_0_final.png","content":"<h2 id=\"将整python项目的代码中的py文件转为so\"><a href=\"#将整python项目的代码中的py文件转为so\" class=\"headerlink\" title=\"将整python项目的代码中的py文件转为so\"></a>将整python项目的代码中的py文件转为so</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[<strong>重要提醒</strong>]</p>\n<ol>\n<li>执行打包的动作，不要在源文件上进行，把代码复制到打包环境后再去打包分发，否则会因为清理代码的动作，造成代码丢失</li>\n<li>代码清理会清理<code>&#39;.c&#39;, &#39;.py&#39;, &#39;.pyc&#39;, &#39;.o&#39;</code>文件，所以如果项目中本身就有引用这些文件的话，则需要进行过滤忽略</li>\n</ol></blockquote>\n<p><strong>这里选用一个django项目</strong>：将django整个项目的代码全部转为so文件后，再发布</p>\n<h1 id=\"1-新建Django项目\"><a href=\"#1-新建Django项目\" class=\"headerlink\" title=\"1. 新建Django项目\"></a>1. 新建Django项目</h1><p>新建一个django项目：代码目录如下</p>\n<pre><code>.\n├── account    # 新建的一个app\n│   ├── __init__.py\n│   ├── admin.py\n│   ├── apps.py\n│   ├── migrations\n│   │   └── __init__.py\n│   ├── models.py\n│   ├── tests.py\n│   └── views.py\n├── jiami\n│   ├── __init__.py\n│   ├── __pycache__\n│   │   ├── __init__.cpython-310.pyc\n│   │   └── settings.cpython-310.pyc\n│   ├── asgi.py\n│   ├── settings.py\n│   ├── urls.py\n│   └── wsgi.py\n└── manage.py\n</code></pre>\n<p>现在把这个项目的所有py文件全部转成so，然后启动执行。</p>\n<p>先回忆下单个文件的做法：新建一个<code>setup.py</code>在<code>guaner.py</code>的同级目录下</p>\n<pre><code>from distutils.core import setup\nfrom Cython.Build import cythonize\nsetup(ext_modules=cythonize([&quot;guaner.py&quot;]))\n</code></pre>\n<p>示例：创建完成后目录结构如下</p>\n<pre><code>.\n├── __init__.py\n├── guaner.py\n└── setup.py\n​\n0 directories, 3 files\n</code></pre>\n<p>然后执行以下命令进行转so</p>\n<pre><code>python setup.py build_ext\n</code></pre>\n<p>生成的so文件如下</p>\n<pre><code>jiami\n├── build\n│   ├── lib.macosx-10.9-x86_64-3.10\n│   │   └── guaner.cpython-310-darwin.so\n│   └── temp.macosx-10.9-x86_64-3.10\n│       └── guaner.o\n├── guaner.c\n├── guaner.py\n└── setup.py\n</code></pre>\n<h1 id=\"2-梳理要实现的效果\"><a href=\"#2-梳理要实现的效果\" class=\"headerlink\" title=\"2. 梳理要实现的效果\"></a>2. 梳理要实现的效果</h1><p>同理我们要实现整个项目的py文件的<code>so</code>化后然后可以直接部署运行，需要做到以下几个要求：</p>\n<ol>\n<li>不能改变文件的目录结构</li>\n<li>原<code>py</code>文件不能存在，否则不能起到加密的用途</li>\n<li>不能产生非<code>so</code>的文件存在，如新生成的<code>.c</code>文件需要删除</li>\n<li>特殊文件不能转<code>so</code>，比如<code>django</code>的<code>manage.py</code>文件就不能转<code>so</code>，否则<code>python manage.py xx</code>命令无法执行</li>\n</ol>\n<h1 id=\"3-实现\"><a href=\"#3-实现\" class=\"headerlink\" title=\"3. 实现\"></a>3. 实现</h1><h2 id=\"3-1-先实现转so的动作\"><a href=\"#3-1-先实现转so的动作\" class=\"headerlink\" title=\"3.1 先实现转so的动作\"></a>3.1 先实现转so的动作</h2><p><code>setup(ext_modules=cythonize([&quot;guaner.py&quot;]))</code>中<code>cythonize</code>需要提供所有的py文件，那么要做的第一步就是获取所有的py文件</p>\n<h3 id=\"3-1-1-获取项目中的所有py文件\"><a href=\"#3-1-1-获取项目中的所有py文件\" class=\"headerlink\" title=\"3.1.1 获取项目中的所有py文件\"></a>3.1.1 获取项目中的所有py文件</h3><pre><code>def get_all_py_files(dir_root):\n    &quot;&quot;&quot;获取所有的py文件，要编译成so的文件\n\n    :params dir_root: 项目根目录地址\n    &quot;&quot;&quot;\n    res_py_file_list = []\n    for root, dirs, files in os.walk(dir_root):\n        for file in files:\n            if os.path.splitext(file)[1] != &#39;.py&#39;:\n                continue\n            if &#39;manage.py&#39; in file:\n                # manage.py文件需要排除在外，不能转so\n                continue\n            _path = f&#39;&#123;root&#125;/&#123;file&#125;&#39;\n            res_py_file_list.append(_path)\n    return res_py_file_list\n\n</code></pre>\n<h3 id=\"3-1-2-转so\"><a href=\"#3-1-2-转so\" class=\"headerlink\" title=\"3.1.2 转so\"></a>3.1.2 转so</h3><p>将生成的so文件全部生成在其py文件原来的目录下</p>\n<pre><code>\ndef py_to_so():\n    project_dir = &#39;./&#39;   # 项目相对路径\n    res_py_file_list = get_all_py_files(project_dir)\n    build_dir = &#39;./&#39;\n    build_tmp_dir = &#39;./&#39;\n    # 为了让so文件直接在源目录结构下生成，所以指定buid和dist都是当前目录\n    setup(ext_modules=cythonize(res_py_file_list), script_args=[&quot;build_ext&quot;, &quot;-b&quot;, build_dir, &quot;-t&quot;, build_tmp_dir])\n\n</code></pre>\n<p>执行转so，看看情况<br>**完整的文件内容如下：<code>jiami.py</code>文件</p>\n<pre><code>\nimport os\n\nfrom distutils.core import setup\nfrom Cython.Build import cythonize\n\n\ndef get_all_py_files(dir_root):\n    &quot;&quot;&quot;获取所有的py文件，要编译成so的文件\n\n    :params dir_root: 项目根目录地址\n    &quot;&quot;&quot;\n    res_py_file_list = []\n    for root, dirs, files in os.walk(dir_root):\n        for file in files:\n            if os.path.splitext(file)[1] != &#39;.py&#39;:\n                continue\n            if &#39;manage.py&#39; in file:\n                # manage.py文件需要排除在外，不能转so\n                continue\n            _path = f&#39;&#123;root&#125;/&#123;file&#125;&#39;\n            res_py_file_list.append(_path)\n    return res_py_file_list\n\n\ndef py_to_so():\n    project_dir = &#39;./&#39;\n    res_py_file_list = get_all_py_files(project_dir)\n    build_dir = &#39;./&#39;\n    build_tmp_dir = &#39;./&#39;\n\n    setup(ext_modules=cythonize(res_py_file_list), script_args=[&quot;build_ext&quot;, &quot;-b&quot;, build_dir, &quot;-t&quot;, build_tmp_dir])\n\n\n\nif __name__ == &#39;__main__&#39;:\n    py_to_so()\n</code></pre>\n<p>执行<code>python jiami.py</code>开始转<code>so</code>，执行结束后，结果如下：</p>\n<pre><code>.\n├── account\n│   ├── __init__.c\n│   ├── __init__.cpython-310-darwin.so\n│   ├── __init__.o\n│   ├── __init__.py\n│   ├── admin.c\n│   ├── admin.cpython-310-darwin.so\n│   ├── admin.o\n│   ├── admin.py\n│   ├── apps.c\n│   ├── apps.cpython-310-darwin.so\n│   ├── apps.o\n│   ├── apps.py\n│   ├── migrations\n│   │   ├── __init__.c\n│   │   ├── __init__.cpython-310-darwin.so\n│   │   ├── __init__.o\n│   │   └── __init__.py\n│   ├── models.c\n│   ├── models.cpython-310-darwin.so\n│   ├── models.o\n│   ├── models.py\n│   ├── tests.c\n│   ├── tests.cpython-310-darwin.so\n│   ├── tests.o\n│   ├── tests.py\n│   ├── views.c\n│   ├── views.cpython-310-darwin.so\n│   ├── views.o\n│   └── views.py\n├── jiami\n│   ├── __init__.c\n│   ├── __init__.cpython-310-darwin.so\n│   ├── __init__.o\n│   ├── __init__.py\n│   ├── __pycache__\n│   │   ├── __init__.cpython-310.pyc\n│   │   └── settings.cpython-310.pyc\n│   ├── asgi.c\n│   ├── asgi.cpython-310-darwin.so\n│   ├── asgi.o\n│   ├── asgi.py\n│   ├── settings.c\n│   ├── settings.cpython-310-darwin.so\n│   ├── settings.o\n│   ├── settings.py\n│   ├── urls.c\n│   ├── urls.cpython-310-darwin.so\n│   ├── urls.o\n│   ├── urls.py\n│   ├── wsgi.c\n│   ├── wsgi.cpython-310-darwin.so\n│   ├── wsgi.o\n│   └── wsgi.py\n├── jiami.c\n├── jiami.cpython-310-darwin.so\n├── jiami.o\n├── jiami.py\n└── manage.py\n</code></pre>\n<p>可以看到<code>Cython</code>生成了一些<code>.c</code>、<code>.o</code>文件，以及我们想要的<code>.so</code>文件，当前我们满足了第一个要求**生成的<code>so</code>文件目录结构没有变化，下一步我们需要清理中间的<code>.c</code>、<code>.o</code>、<code>.py</code>文件。<br>清理办法：遍历目录删除<code>.c</code>、<code>.o</code>、<code>.py</code>文件，剩下的都是想要的，只留下了<code>so</code>文件，以及可能存在的一些项目配置文件</p>\n<h3 id=\"3-1-3-清理文件目录\"><a href=\"#3-1-3-清理文件目录\" class=\"headerlink\" title=\"3.1.3 清理文件目录\"></a>3.1.3 清理文件目录</h3><p>注意清理文件的时候需要注意，不能把没有转so的py文件也给清理了，<strong>否则可能会影响业务运行</strong></p>\n<pre><code>\ndef clean_c_file(dir_root):\n    for root, dirs, files in os.walk(dir_root):\n        for file in files:\n            # 这是执行的jiami.py文件，不需要转so，也不需要删除\n            if &#39;jiami.py&#39; in file:\n                continue\n            # 这是执行的django的命令入口文件，不需要转so，也不需要删除，否则会影响业务使用\n            if &#39;manage.py&#39; in file:\n                continue\n            if os.path.splitext(file)[1] in [&#39;.c&#39;, &#39;.py&#39;, &#39;.pyc&#39;, &#39;.o&#39;]:\n                _path = f&#39;&#123;root&#125;/&#123;file&#125;&#39;\n                os.remove(_path)\n</code></pre>\n<p>然后我们再执行一次看看，先看完整的<code>jiami.py</code>文件内容</p>\n<p>这里有个危险的动作，清除掉多余的文件是直接删除了，所以执行前不要在源项目代码执行，而是在打包环境秩序，否则有可能会导致文件丢失</p>\n<pre><code>import os\n\nfrom distutils.core import setup\nfrom Cython.Build import cythonize\n\n\ndef get_all_py_files(dir_root):\n    &quot;&quot;&quot;获取所有的py文件，要编译成so的文件\n\n    :params dir_root: 项目根目录地址\n    &quot;&quot;&quot;\n    res_py_file_list = []\n    for root, dirs, files in os.walk(dir_root):\n        for file in files:\n            if os.path.splitext(file)[1] != &#39;.py&#39;:\n                continue\n            if &#39;manage.py&#39; in file:\n                # manage.py文件需要排除在外，不能转so\n                continue\n            _path = f&#39;&#123;root&#125;/&#123;file&#125;&#39;\n            res_py_file_list.append(_path)\n    return res_py_file_list\n\n\ndef clean_c_file(dir_root):\n    for root, dirs, files in os.walk(dir_root):\n        for file in files:\n            # 这是执行的jiami.py文件，不需要转so，也不需要删除\n            if &#39;jiami.py&#39; in file:\n                continue\n            # 这是执行的django的命令入口文件，不需要转so，也不需要删除，否则会影响业务使用\n            if &#39;manage.py&#39; in file:\n                continue\n            if os.path.splitext(file)[1] in [&#39;.c&#39;, &#39;.py&#39;, &#39;.pyc&#39;, &#39;.o&#39;]:\n                _path = f&#39;&#123;root&#125;/&#123;file&#125;&#39;\n                os.remove(_path)\n\n\ndef py_to_so():\n    project_dir = &#39;./&#39;\n    res_py_file_list = get_all_py_files(project_dir)\n    build_dir = &#39;./&#39;\n    build_tmp_dir = &#39;./&#39;\n\n    setup(ext_modules=cythonize(res_py_file_list), script_args=[&quot;build_ext&quot;, &quot;-b&quot;, build_dir, &quot;-t&quot;, build_tmp_dir])\n    # 清除文件\n    clean_c_file(project_dir)\n\n\n\nif __name__ == &#39;__main__&#39;:\n    py_to_so()\n\n</code></pre>\n<p>执行<code>python jiami.py</code>开始转<code>so</code>，执行结束后，结果如下：</p>\n<pre><code>.\n├── account\n│   ├── __init__.cpython-310-darwin.so\n│   ├── admin.cpython-310-darwin.so\n│   ├── apps.cpython-310-darwin.so\n│   ├── migrations\n│   │   └── __init__.cpython-310-darwin.so\n│   ├── models.cpython-310-darwin.so\n│   ├── tests.cpython-310-darwin.so\n│   └── views.cpython-310-darwin.so\n├── jiami\n│   ├── __init__.cpython-310-darwin.so\n│   ├── __pycache__\n│   ├── asgi.cpython-310-darwin.so\n│   ├── settings.cpython-310-darwin.so\n│   ├── urls.cpython-310-darwin.so\n│   └── wsgi.cpython-310-darwin.so\n├── jiami.cpython-310-darwin.so\n├── jiami.py\n└── manage.py\n</code></pre>\n<p>不错，不错，是我想要的，除了so文件和我要留的外，项目代码很干净了，启动下看看，OK</p>\n<pre><code>Watching for file changes with StatReloader\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\n\nYou have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.\nRun &#39;python manage.py migrate&#39; to apply them.\nAugust 19, 2023 - 10:16:20\nDjango version 4.2.1, using settings &#39;jiami.settings&#39;\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n</code></pre>\n<h1 id=\"4-重点提醒\"><a href=\"#4-重点提醒\" class=\"headerlink\" title=\"4. 重点提醒\"></a>4. 重点提醒</h1><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[<strong>重要提醒</strong>]</p>\n<ol>\n<li>执行打包的动作，不要在源文件上进行，把代码复制到打包环境后再去打包分发，否则会因为清理代码的动作，造成代码丢失</li>\n<li>代码清理会清理<code>&#39;.c&#39;, &#39;.py&#39;, &#39;.pyc&#39;, &#39;.o&#39;</code>文件，所以如果项目中本身就有引用这些文件的话，则需要进行过滤忽略</li>\n</ol></blockquote>\n","feature":true,"text":"将整python项目的代码中的py文件转为so [重要提醒] 执行打包的动作，不要在源文件上进行，把代码复制到打包环境后再去打包分发，否则会因为清理代码的动作，造成代码丢失 代码清理会清理&#39;.c&#39;, &#39;.py&#39;, &#39;.pyc&#39;, &...","link":"","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[{"name":"python","slug":"python","count":2,"path":"api/categories/python.json"}],"tags":[{"name":"加密","slug":"加密","count":2,"path":"api/tags/加密.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%86%E6%95%B4python%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84py%E6%96%87%E4%BB%B6%E8%BD%AC%E4%B8%BAso\"><span class=\"toc-text\">将整python项目的代码中的py文件转为so</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E6%96%B0%E5%BB%BADjango%E9%A1%B9%E7%9B%AE\"><span class=\"toc-text\">1. 新建Django项目</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E6%A2%B3%E7%90%86%E8%A6%81%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%95%88%E6%9E%9C\"><span class=\"toc-text\">2. 梳理要实现的效果</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#3-%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">3. 实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E5%85%88%E5%AE%9E%E7%8E%B0%E8%BD%ACso%E7%9A%84%E5%8A%A8%E4%BD%9C\"><span class=\"toc-text\">3.1 先实现转so的动作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-1-%E8%8E%B7%E5%8F%96%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89py%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">3.1.1 获取项目中的所有py文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-2-%E8%BD%ACso\"><span class=\"toc-text\">3.1.2 转so</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-3-%E6%B8%85%E7%90%86%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">3.1.3 清理文件目录</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#4-%E9%87%8D%E7%82%B9%E6%8F%90%E9%86%92\"><span class=\"toc-text\">4. 重点提醒</span></a>","author":{"name":"小禅又小禅","slug":"blog-author","avatar":"/images/7760650_0_final.png","link":"/","description":"小禅又小禅，哎哎哎呀","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"python通过将py文件转为so实现代码加密","uid":"b17cfe320b792f7a8a70851eed21c5c9","slug":"python通过将py文件转为so实现代码加密","date":"2023-08-18T16:21:34.000Z","updated":"2023-08-18T17:07:46.535Z","comments":false,"path":"api/articles/python通过将py文件转为so实现代码加密.json","keywords":null,"cover":"images/17332563_0_final.png","text":"这里介绍一种通过将 .py 代码转为.so文件来做到某种意义上的加密的方法 前提提醒： 不同的操作系统环境中转so后只能在其相同的环境内执行，无法实现跨平台可用 单个文件转so：把guaner.py文件转为so在guaner.py的同级目录下新建一个setup.py（名称可以自己...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"python","slug":"python","count":2,"path":"api/categories/python.json"}],"tags":[{"name":"加密","slug":"加密","count":2,"path":"api/tags/加密.json"}],"author":{"name":"小禅又小禅","slug":"blog-author","avatar":"/images/7760650_0_final.png","link":"/","description":"小禅又小禅，哎哎哎呀","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}