[{"id":"131b7583d9015ea1c037b717572010d5","title":"python将整个项目的py转为so","content":"将整python项目的代码中的py文件转为so\n\n\n\n\n\n\n\n\n[重要提醒]\n\n执行打包的动作，不要在源文件上进行，把代码复制到打包环境后再去打包分发，否则会因为清理代码的动作，造成代码丢失\n代码清理会清理&#39;.c&#39;, &#39;.py&#39;, &#39;.pyc&#39;, &#39;.o&#39;文件，所以如果项目中本身就有引用这些文件的话，则需要进行过滤忽略\n\n这里选用一个django项目：将django整个项目的代码全部转为so文件后，再发布\n1. 新建Django项目新建一个django项目：代码目录如下\n.\n├── account    # 新建的一个app\n│   ├── __init__.py\n│   ├── admin.py\n│   ├── apps.py\n│   ├── migrations\n│   │   └── __init__.py\n│   ├── models.py\n│   ├── tests.py\n│   └── views.py\n├── jiami\n│   ├── __init__.py\n│   ├── __pycache__\n│   │   ├── __init__.cpython-310.pyc\n│   │   └── settings.cpython-310.pyc\n│   ├── asgi.py\n│   ├── settings.py\n│   ├── urls.py\n│   └── wsgi.py\n└── manage.py\n\n现在把这个项目的所有py文件全部转成so，然后启动执行。\n先回忆下单个文件的做法：新建一个setup.py在guaner.py的同级目录下\nfrom distutils.core import setup\nfrom Cython.Build import cythonize\nsetup(ext_modules=cythonize([&quot;guaner.py&quot;]))\n\n示例：创建完成后目录结构如下\n.\n├── __init__.py\n├── guaner.py\n└── setup.py\n​\n0 directories, 3 files\n\n然后执行以下命令进行转so\npython setup.py build_ext\n\n生成的so文件如下\njiami\n├── build\n│   ├── lib.macosx-10.9-x86_64-3.10\n│   │   └── guaner.cpython-310-darwin.so\n│   └── temp.macosx-10.9-x86_64-3.10\n│       └── guaner.o\n├── guaner.c\n├── guaner.py\n└── setup.py\n\n2. 梳理要实现的效果同理我们要实现整个项目的py文件的so化后然后可以直接部署运行，需要做到以下几个要求：\n\n不能改变文件的目录结构\n原py文件不能存在，否则不能起到加密的用途\n不能产生非so的文件存在，如新生成的.c文件需要删除\n特殊文件不能转so，比如django的manage.py文件就不能转so，否则python manage.py xx命令无法执行\n\n3. 实现3.1 先实现转so的动作setup(ext_modules=cythonize([&quot;guaner.py&quot;]))中cythonize需要提供所有的py文件，那么要做的第一步就是获取所有的py文件\n3.1.1 获取项目中的所有py文件def get_all_py_files(dir_root):\n    &quot;&quot;&quot;获取所有的py文件，要编译成so的文件\n\n    :params dir_root: 项目根目录地址\n    &quot;&quot;&quot;\n    res_py_file_list = []\n    for root, dirs, files in os.walk(dir_root):\n        for file in files:\n            if os.path.splitext(file)[1] != &#39;.py&#39;:\n                continue\n            if &#39;manage.py&#39; in file:\n                # manage.py文件需要排除在外，不能转so\n                continue\n            _path = f&#39;&#123;root&#125;/&#123;file&#125;&#39;\n            res_py_file_list.append(_path)\n    return res_py_file_list\n\n\n3.1.2 转so将生成的so文件全部生成在其py文件原来的目录下\n\ndef py_to_so():\n    project_dir = &#39;./&#39;   # 项目相对路径\n    res_py_file_list = get_all_py_files(project_dir)\n    build_dir = &#39;./&#39;\n    build_tmp_dir = &#39;./&#39;\n    # 为了让so文件直接在源目录结构下生成，所以指定buid和dist都是当前目录\n    setup(ext_modules=cythonize(res_py_file_list), script_args=[&quot;build_ext&quot;, &quot;-b&quot;, build_dir, &quot;-t&quot;, build_tmp_dir])\n\n\n执行转so，看看情况**完整的文件内容如下：jiami.py文件\n\nimport os\n\nfrom distutils.core import setup\nfrom Cython.Build import cythonize\n\n\ndef get_all_py_files(dir_root):\n    &quot;&quot;&quot;获取所有的py文件，要编译成so的文件\n\n    :params dir_root: 项目根目录地址\n    &quot;&quot;&quot;\n    res_py_file_list = []\n    for root, dirs, files in os.walk(dir_root):\n        for file in files:\n            if os.path.splitext(file)[1] != &#39;.py&#39;:\n                continue\n            if &#39;manage.py&#39; in file:\n                # manage.py文件需要排除在外，不能转so\n                continue\n            _path = f&#39;&#123;root&#125;/&#123;file&#125;&#39;\n            res_py_file_list.append(_path)\n    return res_py_file_list\n\n\ndef py_to_so():\n    project_dir = &#39;./&#39;\n    res_py_file_list = get_all_py_files(project_dir)\n    build_dir = &#39;./&#39;\n    build_tmp_dir = &#39;./&#39;\n\n    setup(ext_modules=cythonize(res_py_file_list), script_args=[&quot;build_ext&quot;, &quot;-b&quot;, build_dir, &quot;-t&quot;, build_tmp_dir])\n\n\n\nif __name__ == &#39;__main__&#39;:\n    py_to_so()\n\n执行python jiami.py开始转so，执行结束后，结果如下：\n.\n├── account\n│   ├── __init__.c\n│   ├── __init__.cpython-310-darwin.so\n│   ├── __init__.o\n│   ├── __init__.py\n│   ├── admin.c\n│   ├── admin.cpython-310-darwin.so\n│   ├── admin.o\n│   ├── admin.py\n│   ├── apps.c\n│   ├── apps.cpython-310-darwin.so\n│   ├── apps.o\n│   ├── apps.py\n│   ├── migrations\n│   │   ├── __init__.c\n│   │   ├── __init__.cpython-310-darwin.so\n│   │   ├── __init__.o\n│   │   └── __init__.py\n│   ├── models.c\n│   ├── models.cpython-310-darwin.so\n│   ├── models.o\n│   ├── models.py\n│   ├── tests.c\n│   ├── tests.cpython-310-darwin.so\n│   ├── tests.o\n│   ├── tests.py\n│   ├── views.c\n│   ├── views.cpython-310-darwin.so\n│   ├── views.o\n│   └── views.py\n├── jiami\n│   ├── __init__.c\n│   ├── __init__.cpython-310-darwin.so\n│   ├── __init__.o\n│   ├── __init__.py\n│   ├── __pycache__\n│   │   ├── __init__.cpython-310.pyc\n│   │   └── settings.cpython-310.pyc\n│   ├── asgi.c\n│   ├── asgi.cpython-310-darwin.so\n│   ├── asgi.o\n│   ├── asgi.py\n│   ├── settings.c\n│   ├── settings.cpython-310-darwin.so\n│   ├── settings.o\n│   ├── settings.py\n│   ├── urls.c\n│   ├── urls.cpython-310-darwin.so\n│   ├── urls.o\n│   ├── urls.py\n│   ├── wsgi.c\n│   ├── wsgi.cpython-310-darwin.so\n│   ├── wsgi.o\n│   └── wsgi.py\n├── jiami.c\n├── jiami.cpython-310-darwin.so\n├── jiami.o\n├── jiami.py\n└── manage.py\n\n可以看到Cython生成了一些.c、.o文件，以及我们想要的.so文件，当前我们满足了第一个要求**生成的so文件目录结构没有变化，下一步我们需要清理中间的.c、.o、.py文件。清理办法：遍历目录删除.c、.o、.py文件，剩下的都是想要的，只留下了so文件，以及可能存在的一些项目配置文件\n3.1.3 清理文件目录注意清理文件的时候需要注意，不能把没有转so的py文件也给清理了，否则可能会影响业务运行\n\ndef clean_c_file(dir_root):\n    for root, dirs, files in os.walk(dir_root):\n        for file in files:\n            # 这是执行的jiami.py文件，不需要转so，也不需要删除\n            if &#39;jiami.py&#39; in file:\n                continue\n            # 这是执行的django的命令入口文件，不需要转so，也不需要删除，否则会影响业务使用\n            if &#39;manage.py&#39; in file:\n                continue\n            if os.path.splitext(file)[1] in [&#39;.c&#39;, &#39;.py&#39;, &#39;.pyc&#39;, &#39;.o&#39;]:\n                _path = f&#39;&#123;root&#125;/&#123;file&#125;&#39;\n                os.remove(_path)\n\n然后我们再执行一次看看，先看完整的jiami.py文件内容\n这里有个危险的动作，清除掉多余的文件是直接删除了，所以执行前不要在源项目代码执行，而是在打包环境秩序，否则有可能会导致文件丢失\nimport os\n\nfrom distutils.core import setup\nfrom Cython.Build import cythonize\n\n\ndef get_all_py_files(dir_root):\n    &quot;&quot;&quot;获取所有的py文件，要编译成so的文件\n\n    :params dir_root: 项目根目录地址\n    &quot;&quot;&quot;\n    res_py_file_list = []\n    for root, dirs, files in os.walk(dir_root):\n        for file in files:\n            if os.path.splitext(file)[1] != &#39;.py&#39;:\n                continue\n            if &#39;manage.py&#39; in file:\n                # manage.py文件需要排除在外，不能转so\n                continue\n            _path = f&#39;&#123;root&#125;/&#123;file&#125;&#39;\n            res_py_file_list.append(_path)\n    return res_py_file_list\n\n\ndef clean_c_file(dir_root):\n    for root, dirs, files in os.walk(dir_root):\n        for file in files:\n            # 这是执行的jiami.py文件，不需要转so，也不需要删除\n            if &#39;jiami.py&#39; in file:\n                continue\n            # 这是执行的django的命令入口文件，不需要转so，也不需要删除，否则会影响业务使用\n            if &#39;manage.py&#39; in file:\n                continue\n            if os.path.splitext(file)[1] in [&#39;.c&#39;, &#39;.py&#39;, &#39;.pyc&#39;, &#39;.o&#39;]:\n                _path = f&#39;&#123;root&#125;/&#123;file&#125;&#39;\n                os.remove(_path)\n\n\ndef py_to_so():\n    project_dir = &#39;./&#39;\n    res_py_file_list = get_all_py_files(project_dir)\n    build_dir = &#39;./&#39;\n    build_tmp_dir = &#39;./&#39;\n\n    setup(ext_modules=cythonize(res_py_file_list), script_args=[&quot;build_ext&quot;, &quot;-b&quot;, build_dir, &quot;-t&quot;, build_tmp_dir])\n    # 清除文件\n    clean_c_file(project_dir)\n\n\n\nif __name__ == &#39;__main__&#39;:\n    py_to_so()\n\n\n执行python jiami.py开始转so，执行结束后，结果如下：\n.\n├── account\n│   ├── __init__.cpython-310-darwin.so\n│   ├── admin.cpython-310-darwin.so\n│   ├── apps.cpython-310-darwin.so\n│   ├── migrations\n│   │   └── __init__.cpython-310-darwin.so\n│   ├── models.cpython-310-darwin.so\n│   ├── tests.cpython-310-darwin.so\n│   └── views.cpython-310-darwin.so\n├── jiami\n│   ├── __init__.cpython-310-darwin.so\n│   ├── __pycache__\n│   ├── asgi.cpython-310-darwin.so\n│   ├── settings.cpython-310-darwin.so\n│   ├── urls.cpython-310-darwin.so\n│   └── wsgi.cpython-310-darwin.so\n├── jiami.cpython-310-darwin.so\n├── jiami.py\n└── manage.py\n\n不错，不错，是我想要的，除了so文件和我要留的外，项目代码很干净了，启动下看看，OK\nWatching for file changes with StatReloader\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\n\nYou have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.\nRun &#39;python manage.py migrate&#39; to apply them.\nAugust 19, 2023 - 10:16:20\nDjango version 4.2.1, using settings &#39;jiami.settings&#39;\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n\n4. 重点提醒\n\n\n\n\n\n\n\n\n[重要提醒]\n\n执行打包的动作，不要在源文件上进行，把代码复制到打包环境后再去打包分发，否则会因为清理代码的动作，造成代码丢失\n代码清理会清理&#39;.c&#39;, &#39;.py&#39;, &#39;.pyc&#39;, &#39;.o&#39;文件，所以如果项目中本身就有引用这些文件的话，则需要进行过滤忽略\n\n","slug":"python将整个项目的py转为so","date":"2023-08-19T07:13:54.000Z","categories_index":"python","tags_index":"加密","author_index":"小禅又小禅"},{"id":"b17cfe320b792f7a8a70851eed21c5c9","title":"python通过将py文件转为so实现代码加密","content":"这里介绍一种通过将 .py 代码转为.so文件来做到某种意义上的加密的方法\n前提提醒： 不同的操作系统环境中转so后只能在其相同的环境内执行，无法实现跨平台可用\n单个文件转so：把guaner.py文件转为so在guaner.py的同级目录下新建一个setup.py（名称可以自己定义，不一定要用setup.py命名）文件，文件的内容如下：\nfrom distutils.core import setup\nfrom Cython.Build import cythonize\nsetup(ext_modules = cythonize([&quot;guaner.py&quot;]))\n\n然后执行以下命令进行转so\npython setup.py build_ext\n\n示例：创建完成后目录结构如下\n.\n├── __init__.py\n├── guaner.py\n└── setup.py\n​\n0 directories, 3 files\n\n然后执行命令开始转so\n.\n├── __init__.py\n├── build\n│   ├── lib.macosx-10.9-x86_64-3.10\n│   │   └── test\n│   │       └── jiami\n│   │           └── guaner.cpython-310-darwin.so\n│   └── temp.macosx-10.9-x86_64-3.10\n│       └── guaner.o\n├── guaner.c\n├── guaner.py\n└── setup.py\n\n生成的so文件在build目录下，找到guaner.cpython-310-darwin.so就是转so后的文件了\n重点提醒： __init__.py文件对转so的影响\n注意看到，为什么多了一个jiami目录？首先看下我完整的文件目录结构：\ntest\n├── __init__.py\n├── jiami\n│   ├── guaner.py\n│   └── setup.py\n\n这是我完整的目录结构，里面有个很关键的文件，test目录下有__init__.py，jiami目录下也有__init__.py，在转so文件的时候，因为python代码结构中，如果目录中存在__init__.py，会把当前这个目录当作一个包，模块，可以被其他目录下代码引用，所以转so的时候，会顺着__init__.py所在的包结构，一层层的往上找，直到最后非python模块的目录为止\n因此打包完成后的目录结构就是这样的结构了：\n.\n├── __init__.py\n├── build\n│   ├── lib.macosx-10.9-x86_64-3.10\n│   │   └── test\n│   │       └── jiami\n│   │           └── guaner.cpython-310-darwin.so\n│   └── temp.macosx-10.9-x86_64-3.10\n│       └── guaner.o\n├── guaner.c\n├── guaner.py\n└── setup.py\n\n现在去掉__init__.py再打包看看结果jiami\n├── guaner.py\n└── setup.py\n\n执行python setup.py build_ext得到so文件目录如下\njiami\n├── build\n│   ├── lib.macosx-10.9-x86_64-3.10\n│   │   └── guaner.cpython-310-darwin.so\n│   └── temp.macosx-10.9-x86_64-3.10\n│       └── guaner.o\n├── guaner.c\n├── guaner.py\n└── setup.py\n\n这样看，代码是不是就很符合自己的期望了，这样把文件so文件分发到相同操作系统环境后，就可以放心执行不用担心别人可以查看我们的源代码了\n现在我们可以做到单个文件转位so了，那么我们是不是可以把当前的python项目整体的所有代码全部转位so文件了，这样发布给用户的时候，也不用担心看到我们的源代码了，下一章开始介绍打包整个python项目 \n","slug":"python通过将py文件转为so实现代码加密","date":"2023-08-18T16:21:34.000Z","categories_index":"python","tags_index":"加密","author_index":"小禅又小禅"},{"id":"eb5f4bc5c6b0be6986881b7a1cd7ad24","title":"小铲","content":"小铲\n","slug":"小铲","date":"2023-07-30T14:14:54.000Z","categories_index":"应用","tags_index":"密码本","author_index":"小禅又小禅"},{"id":"b545058e412a8c355d0fc0acd5583c4c","title":"应用下载","content":"应用下载1. 神兽密码本下载https://gitee.com/sunspace/shenshoumima/releases/tag/V1.3.2\n","slug":"应用下载","date":"2023-07-30T14:14:36.000Z","categories_index":"应用","tags_index":"密码本","author_index":"小禅又小禅"},{"id":"091d901a107acdab25635c2778679552","title":"安全产品大纲","content":"网络安全\n","slug":"安全产品大纲","date":"2023-07-30T12:59:51.000Z","categories_index":"安全","tags_index":"安全","author_index":"小禅又小禅"},{"id":"765c237e6edd8430fb074fe1ddc29da2","title":"小铲使用说明","content":"小铲子\n","slug":"小铲使用说明","date":"2023-07-30T12:52:51.000Z","categories_index":"应用","tags_index":"密码本","author_index":"小禅又小禅"},{"id":"6c5d4d98f2b1ebf7f008562a78831f62","title":"神兽密码本","content":"神兽密码本1. 下载安装在应用下载界面下载应用程序\n2. 设置主密码点击设置主密码 设置主密码\n输入主密码 这个密码是最重要的！！后续所有的账号认证都需要用到这个密码来进行验证，同时也是密码在本地存储加密的钥匙\n设置完密码后就可以开始使用啦\n3. 新增系统及账号3.1 新增系统\n3.2 新增标签新增标签输入需要的标签后，回车即可！\n给系统设置标签\n3.2 给系统新增账号添加账号密码也可以点击生成一个新的密码选择密码组成，密码长度，点击生成，可以生产一个符合自己需要的密码，如果需要使用，则点击应用按钮，刚生成的密码就可以被应用了，然后点击保存即可可以看到已生成的密码\n","slug":"神兽密码本","date":"2023-07-30T12:50:49.000Z","categories_index":"应用","tags_index":"密码本","author_index":"小禅又小禅"}]